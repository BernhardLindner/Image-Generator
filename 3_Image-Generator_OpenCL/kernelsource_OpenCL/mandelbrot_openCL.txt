const char *mandelbrot_openCL_ocl =
"__kernel void mandelbrot(__global unsigned char *imagebuffer,\n"
"                          double xmin,\n"
"                          double xmax,\n"
"                          double ymin,\n"
"                          double ymax,\n"
"                          double e,\n"
"                          double zoom,\n"
"                          __global unsigned char *palette,\n"
"                          int WIDTH,\n"
"                          int HEIGHT)\n"
"{\n"
"  const int MAX_ITERATION = 1023;\n"
"\n"
"  double xp;\n"
"  xp = ((xmax - xmin) / WIDTH);\n"
"  double yp;\n"
"  yp = ((ymax - ymin) / HEIGHT);\n"
"\n"
"  int pixel_y = get_global_id(0);\n"
"  int pixel_x = get_global_id(1);\n"
"\n"
"  if ((pixel_y < HEIGHT) && (pixel_x < WIDTH))\n"
"  {\n"
"    double x0;\n"
"    x0 = ((xmin + (pixel_x * xp)) / zoom);\n"
"\n"
"    double y0;\n"
"    y0 = ((ymin + (pixel_y * yp)) / zoom);\n"
"\n"
"    double x;\n"
"    x = 0.0;\n"
"\n"
"    double y;\n"
"    y = 0.0;\n"
"\n"
"    int iteration;\n"
"    iteration = 0;\n"
"\n"
"    double q;\n"
"    q = (x0 - 0.25) * (x0 - 0.25) + (y0 * y0);\n"
"\n"
"    if (((q * (q + (x0 - 0.25))) < (0.25 * (y0 * y0))) ||\n"
"      (((x0 + 1) * (x0 + 1) + (y0 * y0)) < (0.0625)))\n"
"    {\n"
"      iteration = MAX_ITERATION;\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x))] =\n"
"      palette[iteration * 3];\n"
"\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x) + 1)] =\n"
"      palette[iteration * 3 + 1];\n"
"\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x) + 2)] =\n"
"      palette[iteration * 3 + 2];\n"
"    }\n"
"    else\n"
"    {\n"
"      while ((((x * x) + (y * y)) < 4) && (iteration < MAX_ITERATION))\n"
"      {\n"
"        double xtemp;\n"
"        xtemp = ((x * x) - (y * y) + x0);\n"
"\n"
"        y = ((2 * x * y) + y0);\n"
"        x = xtemp;\n"
"        iteration = iteration + 1;\n"
"      }\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x))] =\n"
"      palette[iteration * 3];\n"
"\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x) + 1)] =\n"
"      palette[iteration * 3 + 1];\n"
"\n"
"      imagebuffer[(pixel_y * WIDTH * 3 + (3 * pixel_x) + 2)] =\n"
"      palette[iteration * 3 + 2];\n"
"    }\n"
"  }\n"
"}\n"
;
